#!/usr/bin/env perl

use warnings;
use Curses;
use Curses::UI;
use Getopt::Long;
use Data::Dumper;
use IPC::Open3;
use threads;
use Thread::Queue;
use POSIX;
use Fcntl ':flock';
use IO::Handle;
use File::Temp 'tempfile';
use Text::ParseWords 'shellwords';

$query_prompt = "> ";
$initial_query = '';
$size_limit = 1024*1024;
$type_timeout = 1500;
$hotkey_fire_spec = '';
$no_clear_on_exit = 0;
$no_border = 0;
@command_template = ('grep', '-i', '$QUERY');
$no_separator_line = 0;
$no_hscroll = 0;
$no_vscroll = 0;
$always_hscroll = 0;
$always_vscroll = 0;
$wrapping = 0;
$query_box_bottom = 0;
$tail_result = 0;
$stream_filter = 0;
$hotkey_quit = "\cC";
$hotkey_prev_result = "\cP";
$hotkey_wrap = KEY_F(2);
$hotkey_edit_filterer = KEY_F(8);
$hotkey_tail_head = "\cT";

# TODO history file $QUERY

Getopt::Long::Configure ('bundling', 'no_ignore_case');
if(!GetOptions(
	'p|prompt=s' => \$query_prompt,
	'i|initial-query=s' => \$initial_query,
	'l|size-limit=i' => \$size_limit,
	't|timeout=i' => \$type_timeout,
	'k|key=s' => \$hotkey_fire_spec,
	'X|no-clear' => \$no_clear_on_exit,
	'B|no-border' => \$no_border,
	'S|no-separator' => \$no_separator_line,
	'no-scroll' => sub{ $no_hscroll = $no_vscroll = 1; },
	'no-hscroll' => \$no_hscroll,
	'no-vscroll' => \$no_vscroll,
	'always-scroll' => sub{ $always_hscroll = $always_vscroll = 1; },
	'always-hscroll' => \$always_hscroll,
	'always-vscroll' => \$always_vscroll,
	'w|wrap' => \$wrapping,
	'b|bottom' => \$query_box_bottom,
	'T|tail' => \$tail_result,
	's|stream' => \$stream_filter,
))
{
print "Usage: [command-1] | $0 [options] -- [command-2] [args]
Options:
  -p, --prompt STR         prompt in front of query field
  -i, --initial-query STR  initial query string
  -l, --size-limit BYTES   below this size input kept in memory
  -t, --timeout MSEC       wait this much milli-seconds before fire query, -1 to disable  #TODO
  -k, --key KEY            fire query on keypress, possible KEY names e.g.
                           'M-f', 'C-f', 'KEY_ENTER', 'F5'
                           https://metacpan.org/pod/release/GIRAFFED/Curses-1.30a/Curses.pm#Available-Constants
  -b, --bottom             show query box on the bottom (default is top)
  -T, --tail               show the tail of result (default is head)
  -s, --stream             do stream filtering, i.e. don't buffer input  #TODO
  -B, --no-border          don't show border
  -S, --no-separator       don't show separator line
  --no-scroll              don't show scrollbars
  --no-[hv]scroll          don't show horizontal/vertical scrollbar
  --always-scroll          always show scrollbars
  --always-[hv]scroll      always show horizontal/vertical scrollbar
  -w, --wrap               default wrap result text (toggle with Ctrl-W)
  -X                       don't clear screen on exit
  
  command-2                command to filter input
  args                     arguments for command-2, '\$QUERY' replaced with the current query
";
exit 1;
}

if(@ARGV)
{
	@command_template = @ARGV;
}


if($hotkey_fire_spec =~ /^M-(.)$/) { $hotkey_fire = eval '"\e'.$1.'"'; }
elsif($hotkey_fire_spec =~ /^C-(.)$/) { $hotkey_fire = eval '"\c'.$1.'"'; }
elsif($hotkey_fire_spec =~ /^KEY_[[:alnum:]]+$/) { $hotkey_fire = eval $hotkey_fire_spec; }
elsif($hotkey_fire_spec =~ /^F(\d+)$/) { $hotkey_fire = KEY_F($1); }
elsif($hotkey_fire_spec eq '') { $hotkey_fire = undef; }
else { die "Invalid KEY name: $hotkey_fire_spec\n"; }


my $InputFH;
my $Thread;
my $CommandPid;
my $MainQueue = new Thread::Queue;
my $border_color;
my $ExitRequested = 0;
my $FireRequested = 0;
my $BuffereSize = 4 * 4096;
my $query_box_height = 1;
my $separator_line = $no_border && !$no_separator_line ? 1 : 0;



# Move stdin away. Set stdin to tty to let Curses read it.
open $STDIN, '<&', STDIN or die "$!\n";
close STDIN or die "$!\n";
open STDIN, '<', '/dev/tty' or die "$!\n";


my $CUI = new Curses::UI(
	-color_support => 1,
	-clear_on_exit => !$no_clear_on_exit,
);
my $win_query = $CUI->add(
	'win_query', 'Window',
	-border => 0,
	-y => $query_box_bottom ? $CUI->{-height}-$query_box_height : 0,
	-height => $query_box_height,
);
my $lab_prompt = $win_query->add(
	'lab_prompt', 'Label',
	-text => $query_prompt,
	-bold => 1,
	-border => 0,
	-width => length $query_prompt,
);
my $edt_query = $win_query->add(
	'edt_query', 'TextEditor',
	-text => $initial_query,
	-pos => length $initial_query,
	-x => length $query_prompt,
);
if($separator_line)  # FIXME!! SIGSEGV
{
	my $win_hline = $CUI->add(
		'win_hline', 'Window',
		-height => 1,
		-y => $query_box_bottom ? $CUI->{-height}-$query_box_height-1 : $query_box_height,
	);
	my $lab_hline = $win_hline->add(
		'lab_hline', 'Label',
		-text => "\x{2500}" x $win_hline->canvaswidth,
	);
	$win_hline->focusable(0);
}
my $win_result = $CUI->add(
	'win_result', 'Window',
	-border => !$no_border,
	-y => $query_box_bottom ? 0 : $query_box_height + $separator_line,
	-height => $CUI->{-height} - $query_box_height - $separator_line,
);
my $edt_result = $win_result->add(
	'edt_result', 'TextEditor',
	-readonly => 1,
	-showoverflow => 0,
	-wrapping => $wrapping,
	-vscrollbar => 0,
	-hscrollbar => 0,
	-y => 0,
	-height => -1,
);
my $half_height = int $win_result->{-height} / 2;
sub win_filterer_y {return $tail_result ? $win_result->{-y} : $win_result->{-y} + $win_result->{-height} - $half_height;}
my $win_filterer = $CUI->add(
	'win_filterer', 'Window',
	-border => 1,
	-title => "Edit Filter command  [F8: apply] [Esc: Discard]",
	-y => win_filterer_y(),
	-height => $half_height,
);
my $edt_filterer = $win_filterer->add(
	'edt_filterer', 'TextEditor',
);
$win_filterer->focusable(0);
$CUI->{current_focus_id} = $CUI->{-draworder}->[-1];


sub adjust_scrollbars
{
	my ($h, $v) = ($edt_result->{-hscrollbar}, $edt_result->{-vscrollbar});
	adjust_scrollbars_do();
	my $changed = ($edt_result->{-hscrollbar} ne $h or $edt_result->{-vscrollbar} ne $v);
	$edt_result->layout if $changed;
	return $changed;
}

sub adjust_scrollbars_do
{
	if($always_hscroll){ $edt_result->{-hscrollbar} = 1; }
	if($always_vscroll){ $edt_result->{-vscrollbar} = 1; }
	if($no_hscroll){ $edt_result->{-hscrollbar} = 0; }
	if($no_vscroll){ $edt_result->{-vscrollbar} = 0; }
	if(($always_hscroll and $always_vscroll) or ($no_hscroll and $no_vscroll)){ return; }
	my $col = 0;
	my $row = 0;
	for my $line (split /\n/, $edt_result->text)
	{
		my $len = length $line;
		$col = $len if $len > $col;
		$row++;
	}
	if(!$no_hscroll and !$always_hscroll){ $edt_result->{-hscrollbar} = !$edt_result->{-wrapping} && $col > $edt_result->canvaswidth ? 1 : 0; }
	if(!$no_vscroll and !$always_vscroll){ $edt_result->{-vscrollbar} = $row > $edt_result->canvasheight ? 1 : 0; }
}

sub refresh_result
{
	adjust_scrollbars();
	$win_result->draw;
	$win_query->draw;
	if($tail_result)
	{
		$MainQueue->enqueue('$edt_result->cursor_to_end; $edt_result->draw');  # FIXME
	}
	if($win_filterer->{-focusable})
	{
		$win_filterer->draw;
	}
}

sub setresult
{
	$edt_result->text($_[0]);
	refresh_result();
}

sub appendresult
{
	setresult($edt_result->text . $_[0]);
}

sub error_result
{
	#TODO
}

sub set_nonblock
{
	my $fh = shift;
	my $flags = fcntl($fh, F_GETFL, 0);
	$flags |= O_NONBLOCK;
	fcntl($fh, F_SETFL, $flags);
}

sub wait_for_input
{
	my $fh = shift;
	my $r = '';
	vec($r, fileno($fh), 1) = 1;
	select($r, undef, undef, undef);
	1;
}

sub run_query
{
	my $query = shift;
	my @command = @command_template;
	@command = map {s/\$QUERY/$query/g; $_} @command;
	
	$ENV{'XIQ_QUERY'} = $query;
	$ENV{'BUF_0_'} = 0;
	$ENV{'BUF_1_'} = 0;
	
	return async {
		my $pid;
		eval {
			$pid = open3(\*CHLD_IN, \*CHLD_OUT, \*CHLD_ERR, @command);
			1;
		};
		if($@)
		{
			$MainQueue->enqueue(['error_result($args[0])', $@]);
			$MainQueue->enqueue(['query_finished($args[0])', -1]);
			return;
		}
		
		$MainQueue->enqueue(q{
			$CommandPid = $args[0];
			$win_result->{-bfg} = "red";
			$win_result->draw;
		}, $pid);
		
		my $feedThread = async {
			open my $input, '<&', $InputFH;
			seek $input, 0, 0;
			CHLD_IN->autoflush(1);
			$SIG{'PIPE'} = 'IGNORE'; #FIXME
			# TODO nonblocking read larger buffers
			while(<$input>)
			{
				print {CHLD_IN} $_;
			}
			close CHLD_IN;
			close $input;
		};
		$feedThread->detach;
		close CHLD_IN;
		
		set_nonblock(CHLD_OUT);
		my $cleared = 0;
		while(wait_for_input(CHLD_OUT))
		{
			my $buf;
			my $bytes = sysread CHLD_OUT, $buf, $BuffereSize;
			if(defined $bytes)
			{
				last if $bytes == 0;
				if(not $cleared){ $MainQueue->enqueue('setresult("")'); $cleared = 1; }
				$MainQueue->enqueue(['appendresult($args[0])', $buf]);
			}
			else
			{
				if(!$!{'EAGAIN'} and !$!{'EWOULDBLOCK'})
				{
					# TODO # read error
					last;
				}
			}
		}
		
		waitpid $pid, 0;
		my $exit_status = $?;
		$MainQueue->enqueue(['query_finished($args[0])', $exit_status]);
	};
}


sub query_finished
{
	my $cmd_status = shift;
	$CommandPid = undef;
	$win_result->{-bfg} = $border_color;
	refresh_result();
	
	if($cmd_status != 0)
	{
		my $exit_signal = $cmd_status & 0x7F;
		my $exit_code = $cmd_status >> 8;
		error_result("Exit code $exit_code, signal $exit_signal");
	}
	
	if($FireRequested)
	{
		$FireRequested = 0;
		fire_query();
	}
}

sub fire_query
{
	if(defined $CommandPid)
	{
		$FireRequested = 1;
		kill SIGTERM, $CommandPid;
	}
	else
	{
		my $query = $edt_query->{-text};
		$Thread = run_query($query);
		$Thread->detach;
	}
}

sub edit_filterer
{
	if($win_filterer->{-focusable})
	{
		@command_template = shellwords($edt_filterer->text);
		hide_filterer();
	}
	else
	{
		my $pos = $edt_filterer->{-pos};
		$edt_filterer->text(join " ", @command_template);
		$edt_filterer->{-pos} = $pos;
		$win_filterer->{stolen_focus_from_id} = $CUI->{current_focus_id};
		$win_filterer->focusable(1);
		$win_query->focusable(0);
		$win_result->focusable(0);
		$edt_filterer->focus;
		$win_filterer->draw;
	}
}

sub hide_filterer
{
	$win_query->focusable(1);
	$win_result->focusable(1);
	$win_filterer->focusable(0);
	$CUI->{-id2object}->{$win_filterer->{stolen_focus_from_id}}->focus;
	$win_result->draw;
	$win_query->draw;
}

sub switch_focus
{
	my $widget = shift;
	my $key = shift;
	$widget->focus_next();
	$CUI->{current_focus_id} = $CUI->{-draworder}->[-1];
}

sub toggle_tail_head
{
	$tail_result = !$tail_result;
	$win_filterer->{-y} = win_filterer_y();
	$win_filterer->layout;
	$win_result->draw;
	$win_query->draw;
	$win_filterer->draw if $win_filterer->{-focusable};
}

sub redraw
{
	Curses::refresh();
	$win_result->draw;
	$win_query->draw;
}

sub display_prev_result
{
	# TODO
	refresh_result();
}

sub quit
{
	kill SIGTERM, $CommandPid if defined $CommandPid;
	$ExitRequested = 1;
}

$SIG{'TERM'} = sub {
	$MainQueue->enqueue('quit');
};



$CUI->set_binding(\&quit, $hotkey_quit);
$CUI->set_binding(\&redraw, "\cL");
$CUI->set_binding(\&display_prev_result, $hotkey_prev_result);
$CUI->set_binding(\&switch_focus, "\t");
$CUI->set_binding(sub {$edt_result->toggle_wrapping; refresh_result();}, $hotkey_wrap);
$win_query->set_binding(\&fire_query, $hotkey_fire) if defined $hotkey_fire;
$CUI->set_binding(\&edit_filterer, $hotkey_edit_filterer);
$win_filterer->set_binding(\&edit_filterer, $hotkey_edit_filterer);
$win_filterer->set_binding(\&hide_filterer, "\e");
$CUI->set_binding(\&toggle_tail_head, $hotkey_tail_head);



$CUI->{-read_timeout} = 0.1;
$border_color = $win_result->{-bfg};
adjust_scrollbars();
$edt_query->focus();



($InputFH, $InputFN) = tempfile("xiq-input-XXXXX", DIR => '/var/run/shm');
unlink $InputFN;
$InputThread = async {
	# TODO loading...
	# TODO nonblocking read in larger buffers
	while(<$STDIN>)
	{
		print {$InputFH} $_;
	}
	#TODO finished
};
$InputThread->detach;


# Curses::UI::mainloop
{
	$CUI->focus(undef, 1);
	$CUI->draw;
	doupdate();
	for(;;)
	{
		$CUI->do_one_event;
		my $item = $MainQueue->dequeue_nb();
		if($item)
		{
			my $code = $item;
			my @args;
			if(ref $item eq 'ARRAY')
			{
				$code = $item->[0];
				@args = map {$item->[$_]} 1..$#$item;
			}
			eval $code;
		}
		elsif(not defined $CommandPid and $ExitRequested)
		{
			last;
		}
	}
}

$CUI->DESTROY;

